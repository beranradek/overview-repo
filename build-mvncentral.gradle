subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'jacoco'
  apply plugin: 'signing'
  apply plugin: 'maven-publish'
  
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
  
  repositories {
    jcenter()
    mavenCentral()
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  // Publishing to Maven Central repository:
  artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
  }

  signing {
    sign configurations.archives
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        pomWithMavenCentralMetadata(pom, rootProject)
        from components.java

        artifact sourcesJar
        artifact javadocJar

        // sign the pom
        pom.withXml {
          def pomFile = file("${project.buildDir}/generated-pom.xml")
          writeTo(pomFile)
          def pomAscFile = signing.sign(pomFile).signatureFiles[0]
          artifact(pomAscFile) {
            classifier = null
            extension = 'pom.asc'
          }
          pomFile.delete()
        }

        // sign the artifacts
        project.tasks.signArchives.signatureFiles.each {
          artifact(it) {
            def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
            if (matcher.find()) {
              classifier = matcher.group(1)
            } else {
              classifier = null
            }
            extension = 'jar.asc'
          }
        }
      }
    }
    repositories {
      maven {
        url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        credentials {
          username sonatypeUsername
          password sonatypePassword
        }
      }
    }
  }

  model {
    tasks.publishMavenJavaPublicationToMavenLocal {
      dependsOn(project.tasks.signArchives)
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
      dependsOn(project.tasks.signArchives)
    }
  }

  task install(dependsOn: publishToMavenLocal) {
    group = 'Publishing'
    description = 'Installs artifacts to local Maven repository'
  }
}

def pomWithMavenCentralMetadata(pom, gradleProject) {
  pom.withXml {
    def root = asNode()

    // eliminate test-scoped dependencies (no need in maven central POMs)
    root.dependencies.removeAll { dep ->
      dep.scope == "test"
    }

    // add all items necessary for maven central publication
    root.children().last() + {
      resolveStrategy = Closure.DELEGATE_FIRST

      description gradleProject.description
      name 'Overview repo'
      url 'https://github.com/beranradek/overview-repo'
      organization {
        name 'org.xbery'
        url 'http://xbery.org'
      }
      issueManagement {
        system 'GitHub'
        url 'https://github.com/beranradek/overview-repo/issues'
      }
      licenses {
        license {
          name 'The Apache License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
      scm {
        url 'https://github.com/beranradek/overview-repo/'
        connection 'scm:git:git://github.com/beranradek/overview-repo.git'
        developerConnection 'scm:git:ssh://git@github.com/beranradek/overview-repo.git'
      }
      developers {
        developer {
          id 'beranradek'
          name 'Radek Beran'
          email 'beran.radek@seznam.cz'
          timezone '+2'
        }
      }
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.0.2'
}
